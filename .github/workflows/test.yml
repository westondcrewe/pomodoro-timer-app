name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  # Frontend tests
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Run linting
      working-directory: ./client
      run: npm run lint
      
    - name: Run tests
      working-directory: ./client
      run: npm test -- --coverage --watchAll=false
      
    - name: Build
      working-directory: ./client
      run: npm run build

  # Backend tests
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: test_db
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install dependencies
      working-directory: ./server
      run: npm ci
      
    - name: Create test environment
      working-directory: ./server
      run: |
        cat > .env << EOF
        MONGODB_URI=mongodb://test_user:test_password@localhost:27017/test_db?authSource=admin
        JWT_SECRET=test-jwt-secret-for-ci-cd-pipeline
        PORT=5000
        NODE_ENV=test
        EOF
        
    - name: Run linting
      working-directory: ./server
      run: npm run lint
      
    - name: Run tests
      working-directory: ./server
      run: npm test
      env:
        MONGODB_URI: mongodb://test_user:test_password@localhost:27017/test_db?authSource=admin
        JWT_SECRET: test-jwt-secret-for-ci-cd-pipeline
        NODE_ENV: test

  # API integration tests
  api:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: [backend]
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: test_db
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install dependencies
      working-directory: ./server
      run: npm ci
      
    - name: Create test environment
      working-directory: ./server
      run: |
        cat > .env << EOF
        MONGODB_URI=mongodb://test_user:test_password@localhost:27017/test_db?authSource=admin
        JWT_SECRET=test-jwt-secret-for-ci-cd-pipeline
        PORT=5000
        NODE_ENV=test
        EOF
        
    - name: Start server and test API
      working-directory: ./server
      run: |
        # Start the server in background
        npm start &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5000/health
        
        # Test API endpoints
        curl -f http://localhost:5000/api
        
        # Test user registration
        REGISTER_RESPONSE=$(curl -s -X POST http://localhost:5000/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","password":"testpass123"}')
        echo "Register response: $REGISTER_RESPONSE"
        
        # Extract JWT token
        JWT_TOKEN=$(echo $REGISTER_RESPONSE | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
        echo "JWT Token: $JWT_TOKEN"
        
        # Test authenticated endpoint
        curl -f -X GET http://localhost:5000/api/stats \
          -H "Authorization: Bearer $JWT_TOKEN"
        
        # Stop server
        kill $SERVER_PID || true 