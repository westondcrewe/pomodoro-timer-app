name: CI/CD Pipeline - Pomodoro Timer App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '18'
  MONGODB_VERSION: '6.0'

jobs:
  # Lint and test frontend
  frontend-test:
    name: Frontend - Lint & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: client/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./client
      run: npm ci
      
    - name: Run frontend linting
      working-directory: ./client
      run: npm run lint
      
    - name: Run frontend tests
      working-directory: ./client
      run: npm test -- --coverage --watchAll=false
      
    - name: Build frontend
      working-directory: ./client
      run: npm run build
      
    - name: Upload frontend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./client/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Lint and test backend
  backend-test:
    name: Backend - Lint & Test
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: test_db
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci
      
    - name: Create test environment file
      working-directory: ./server
      run: |
        cat > .env << EOF
        MONGODB_URI=mongodb://test_user:test_password@localhost:27017/test_db?authSource=admin
        JWT_SECRET=test-jwt-secret-for-ci-cd-pipeline
        PORT=5000
        NODE_ENV=test
        EOF
        
    - name: Run backend linting
      working-directory: ./server
      run: npm run lint
      
    - name: Run backend tests
      working-directory: ./server
      run: npm test
      env:
        MONGODB_URI: mongodb://test_user:test_password@localhost:27017/test_db?authSource=admin
        JWT_SECRET: test-jwt-secret-for-ci-cd-pipeline
        NODE_ENV: test
        
    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # API integration tests
  api-integration-test:
    name: API Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test]
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_password
          MONGO_INITDB_DATABASE: test_db
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
        
    - name: Install backend dependencies
      working-directory: ./server
      run: npm ci
      
    - name: Create test environment file
      working-directory: ./server
      run: |
        cat > .env << EOF
        MONGODB_URI=mongodb://test_user:test_password@localhost:27017/test_db?authSource=admin
        JWT_SECRET=test-jwt-secret-for-ci-cd-pipeline
        PORT=5000
        NODE_ENV=test
        EOF
        
    - name: Start backend server
      working-directory: ./server
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:5000/health || exit 1
        
    - name: Run API integration tests
      run: |
        # Test health endpoint
        curl -f http://localhost:5000/health
        
        # Test API info endpoint
        curl -f http://localhost:5000/api
        
        # Test user registration
        REGISTER_RESPONSE=$(curl -s -X POST http://localhost:5000/api/auth/register \
          -H "Content-Type: application/json" \
          -d '{"username":"testuser","password":"testpass123"}')
        echo "Register response: $REGISTER_RESPONSE"
        
        # Extract JWT token
        JWT_TOKEN=$(echo $REGISTER_RESPONSE | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
        echo "JWT Token: $JWT_TOKEN"
        
        # Test authenticated endpoint
        curl -f -X GET http://localhost:5000/api/stats \
          -H "Authorization: Bearer $JWT_TOKEN"
          
    - name: Stop backend server
      run: pkill -f "npm start" || true

  # Docker build and test
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, api-integration-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and test Docker images
      run: |
        # Build backend image
        docker build -t pomodoro-backend:test ./server
        
        # Build frontend image
        docker build -t pomodoro-frontend:test ./client
        
        # Test backend image
        docker run --rm -d --name test-backend -p 5001:5000 \
          -e MONGODB_URI=mongodb://test:test@localhost:27017/test \
          -e JWT_SECRET=test-secret \
          pomodoro-backend:test
        
        # Wait for backend to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5001/health || exit 1
        
        # Cleanup
        docker stop test-backend || true

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Examples:
        # - Deploy to Heroku
        # - Deploy to AWS ECS
        # - Deploy to Google Cloud Run
        # - Deploy to DigitalOcean App Platform
        
        echo "Staging deployment completed successfully!"

  # Deploy to production (manual trigger only)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Examples:
        # - Deploy to Heroku
        # - Deploy to AWS ECS
        # - Deploy to Google Cloud Run
        # - Deploy to DigitalOcean App Platform
        
        echo "Production deployment completed successfully!"

  # Notify on completion
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ CI/CD pipeline completed successfully!"
        # Add notification logic here (Slack, Discord, email, etc.)
        
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ CI/CD pipeline failed!"
        # Add notification logic here (Slack, Discord, email, etc.) 